# Generated by Django 2.0.2 on 2018-03-12 07:10

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=64, unique=True, verbose_name='用户名')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, unique=True, verbose_name='邮箱')),
                ('password', models.CharField(max_length=128, verbose_name='密码')),
                ('mobile', models.BigIntegerField(help_text='用于手机验证码登录', unique=True, verbose_name='手机')),
                ('name', models.CharField(default='', max_length=32, verbose_name='真实姓名')),
                ('gender', models.SmallIntegerField(choices=[(1, '保密'), (2, '男'), (3, '女')], default=1, verbose_name='性别')),
                ('head_img', models.CharField(default='/static/frontend/head_portrait/logo@2x.png', max_length=128, verbose_name='头像')),
                ('uid', models.CharField(help_text='微信用户绑定和CC视频统计', max_length=64, unique=True, verbose_name='用户唯一标识')),
                ('qq', models.CharField(blank=True, db_index=True, max_length=64, null=True, verbose_name='QQ')),
                ('wx', models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='微信号')),
                ('openid', models.CharField(blank=True, max_length=128, null=True, verbose_name='微信唯一标识（用于推送消息）')),
                ('signature', models.CharField(blank=True, max_length=255, null=True, verbose_name='个人签名')),
                ('brief', models.TextField(blank=True, null=True, verbose_name='个人介绍')),
                ('degree', models.PositiveSmallIntegerField(blank=True, choices=[(1, '学历'), (2, '高中以下'), (3, '中专／高中'), (4, '大专'), (5, '本科'), (6, '硕士'), (7, '博士')], default=1, null=True, verbose_name='学历')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='生日')),
                ('id_card', models.CharField(blank=True, max_length=32, null=True, verbose_name='身份证号或护照号')),
                ('role', models.SmallIntegerField(choices=[(1, '学员'), (2, '导师'), (3, '讲师'), (4, '管理员')], default=1, verbose_name='角色')),
                ('balance', models.PositiveIntegerField(default=0, verbose_name='账户贝里')),
                ('memo', models.TextField(blank=True, default=None, null=True, verbose_name='备注')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='注册时间')),
            ],
            options={
                'verbose_name': '账户信息',
                'verbose_name_plural': '账户信息',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='回答')),
                ('agree_number', models.IntegerField(default=0, verbose_name='点赞数')),
                ('disagree_number', models.IntegerField(default=0, verbose_name='点踩数')),
                ('answer_date', models.DateTimeField(auto_now=True, verbose_name='日期')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Account', verbose_name='回答者')),
            ],
        ),
        migrations.CreateModel(
            name='AnswerComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(max_length=512, verbose_name='评论内容')),
                ('attachment_path', models.CharField(blank=True, help_text='跟进记录的截图等', max_length=128, null=True, verbose_name='附件路径')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Account', verbose_name='评论者')),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Answer')),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.AnswerComment', verbose_name='基于评论的评论')),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=255, unique=True, verbose_name='文章标题')),
                ('article_type', models.SmallIntegerField(choices=[(1, '资讯'), (2, '视频')], default=1)),
                ('brief', models.TextField(max_length=512, verbose_name='摘要')),
                ('head_img', models.CharField(max_length=255, verbose_name='文章图片')),
                ('content', models.TextField(verbose_name='文章正文')),
                ('pub_date', models.DateTimeField(verbose_name='上架日期')),
                ('offline_date', models.DateTimeField(verbose_name='下架日期')),
                ('status', models.SmallIntegerField(choices=[(1, '在线'), (2, '下线')], default=1, verbose_name='状态')),
                ('order', models.SmallIntegerField(default=0, help_text='文章想置顶，可以把数字调大，不要超过1000', verbose_name='权重')),
                ('vid', models.CharField(blank=True, help_text='文章类型是视频, 则需要添加视频VID', max_length=128, null=True, verbose_name='视频VID')),
                ('comment_num', models.SmallIntegerField(default=0, verbose_name='评论数')),
                ('agree_num', models.SmallIntegerField(default=0, verbose_name='点赞数')),
                ('view_num', models.SmallIntegerField(default=0, verbose_name='观看数')),
                ('collect_num', models.SmallIntegerField(default=0, verbose_name='收藏数')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='创建日期')),
                ('position', models.SmallIntegerField(choices=[(1, '信息流'), (2, 'banner大图'), (3, 'banner小图')], default=1, verbose_name='位置')),
            ],
        ),
        migrations.CreateModel(
            name='ArticleSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(unique=True, verbose_name='市')),
                ('name', models.CharField(max_length=64, verbose_name='市名称')),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(verbose_name='文章或者视频ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Account', verbose_name='用户')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='文章或视频表')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='文章或者视频ID')),
                ('content', models.TextField(max_length=1024)),
                ('disagree_number', models.IntegerField(default=0, verbose_name='踩')),
                ('agree_number', models.IntegerField(default=0, verbose_name='赞同数')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Account', verbose_name='用户')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='文章或视频表')),
                ('p_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Comment', verbose_name='父级评论')),
            ],
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='活动名称')),
                ('brief', models.TextField(verbose_name='优惠券介绍')),
                ('coupon_type', models.SmallIntegerField(choices=[(1, '通用券'), (2, '满减券'), (3, '折扣券')], default=1, verbose_name='券类型')),
                ('money_equivalent_value', models.IntegerField(default=0, verbose_name='等值货币（通用和满减券时可抵扣的钱）')),
                ('off_percent', models.PositiveSmallIntegerField(blank=True, help_text='只针对折扣券，例7.9折，写79', null=True, verbose_name='折扣百分比')),
                ('minimum_consume', models.PositiveIntegerField(default=0, help_text='仅在满减券时填写此字段', verbose_name='最低消费')),
                ('object_id', models.PositiveIntegerField(blank=True, help_text='可以把优惠券跟课程ID绑定', null=True, verbose_name='绑定课程')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='数量(张)')),
                ('open_date', models.DateField(verbose_name='优惠券领取开始时间')),
                ('close_date', models.DateField(verbose_name='优惠券领取结束时间')),
                ('valid_begin_date', models.DateField(blank=True, null=True, verbose_name='有效期开始时间')),
                ('valid_end_date', models.DateField(blank=True, null=True, verbose_name='有效结束时间')),
                ('coupon_valid_days', models.PositiveIntegerField(blank=True, help_text='自券被领时开始算起', null=True, verbose_name='优惠券有效期（天）')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='优惠券关联的表（普通课程）')),
            ],
        ),
        migrations.CreateModel(
            name='CouponRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=64, unique=True, verbose_name='优惠券唯一标识')),
                ('status', models.SmallIntegerField(choices=[(1, '未使用'), (2, '已使用'), (3, '已过期')], default=1)),
                ('get_time', models.DateTimeField(help_text='用户领取时间', verbose_name='领取时间')),
                ('used_time', models.DateTimeField(blank=True, null=True, verbose_name='使用时间')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='生成时间')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Account', verbose_name='拥有者')),
                ('coupon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Coupon')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='课程名称或学位课模块名称')),
                ('course_img', models.CharField(max_length=255, verbose_name='课程图片')),
                ('course_type', models.SmallIntegerField(choices=[(1, '付费'), (2, 'VIP专享'), (3, '学位课程')])),
                ('brief', models.TextField(max_length=2048, verbose_name='课程概述')),
                ('level', models.SmallIntegerField(choices=[(1, '初级'), (2, '中级'), (3, '高级')], default=1)),
                ('pub_date', models.DateField(blank=True, null=True, verbose_name='发布日期')),
                ('period', models.PositiveIntegerField(default=7, verbose_name='建议学习周期(days)')),
                ('order', models.IntegerField(help_text='从上一个课程数字往后排', verbose_name='课程顺序')),
                ('attachment_path', models.CharField(blank=True, max_length=128, null=True, verbose_name='课件路径')),
                ('status', models.SmallIntegerField(choices=[(1, '上线'), (2, '下线'), (3, '预上线')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='CourseCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'verbose_name': '课程大类',
                'verbose_name_plural': '课程大类',
            },
        ),
        migrations.CreateModel(
            name='CourseChapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter', models.SmallIntegerField(default=1, verbose_name='章节序号（第N章）')),
                ('name', models.CharField(max_length=128, verbose_name='章节名称')),
                ('summary', models.TextField(blank=True, null=True, verbose_name='章节介绍')),
                ('pub_date', models.DateField(auto_now_add=True, verbose_name='发布日期')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_chapters', to='api.Course')),
            ],
        ),
        migrations.CreateModel(
            name='CourseDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hours', models.IntegerField(verbose_name='课时')),
                ('course_slogan', models.CharField(blank=True, max_length=125, null=True, verbose_name='课程Slogan')),
                ('video_brief_link', models.CharField(blank=True, max_length=255, null=True, verbose_name='课程介绍')),
                ('why_study', models.TextField(verbose_name='为什么学习这门课程')),
                ('what_to_study_brief', models.TextField(verbose_name='我将学到哪些内容')),
                ('career_improvement', models.TextField(verbose_name='此项目如何有助于我的职业生涯')),
                ('prerequisite', models.TextField(max_length=1024, verbose_name='课程先修要求')),
                ('course', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.Course')),
                ('recommend_courses', models.ManyToManyField(related_name='recommend_by', to='api.Course', verbose_name='推荐课程')),
            ],
        ),
        migrations.CreateModel(
            name='CourseOutline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='大纲标题')),
                ('content', models.TextField(max_length=1024, verbose_name='大纲内容')),
                ('order', models.PositiveSmallIntegerField(default=1, verbose_name='大纲显示顺序')),
                ('course_detail', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.CourseDetail')),
            ],
        ),
        migrations.CreateModel(
            name='CourseSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='课程名称')),
                ('section_type', models.SmallIntegerField(choices=[(1, '文档'), (2, '练习'), (3, '视频')], default=3, verbose_name='课程类型')),
                ('order', models.PositiveSmallIntegerField(help_text='建议每个课时之间空1至2个值，以备后续插入课时', verbose_name='课时顺序')),
                ('section_link', models.CharField(blank=True, help_text='若是video，填CC视频的唯一标识（如：ECC9954677D8E1079C33DC5901307461）,若是文档或练习，填链接', max_length=255, null=True, verbose_name='课时链接')),
                ('video_time', models.CharField(blank=True, max_length=32, null=True, verbose_name='视频时长(在前端显示)')),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='发布时间')),
                ('free_trail', models.BooleanField(default=False, verbose_name='是否可试看')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_sections', to='api.CourseChapter')),
            ],
        ),
        migrations.CreateModel(
            name='CourseSubCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.CourseCategory')),
            ],
            options={
                'verbose_name': '课程子类',
                'verbose_name_plural': '课程子类',
            },
        ),
        migrations.CreateModel(
            name='DegreeCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('course_img', models.CharField(max_length=255, verbose_name='缩略图')),
                ('brief', models.TextField(verbose_name='学位课程简介')),
                ('total_scholarship', models.PositiveIntegerField(default=40000, verbose_name='总奖学金(贝里)')),
                ('mentor_compensation_bonus', models.PositiveIntegerField(default=15000, verbose_name='本课程的导师辅导费用(贝里)')),
                ('period', models.PositiveIntegerField(default=150, help_text='为了计算学位奖学金', verbose_name='建议学习周期(days)')),
                ('prerequisite', models.TextField(max_length=1024, verbose_name='课程先修要求')),
            ],
        ),
        migrations.CreateModel(
            name='DegreeRegistrationForm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_company', models.CharField(max_length=64, verbose_name='公司')),
                ('current_position', models.CharField(max_length=64, verbose_name='职位')),
                ('current_salary', models.IntegerField(verbose_name='薪资')),
                ('work_experience', models.IntegerField(verbose_name='工作经验')),
                ('open_module', models.BooleanField(default=True, verbose_name='是否开通第1模块')),
                ('stu_specified_mentor', models.CharField(blank=True, max_length=32, null=True, verbose_name='学员自行指定的导师名')),
                ('study_plan', models.SmallIntegerField(choices=[(1, '1-2小时/天'), (2, '2-3小时/天'), (3, '3-5小时/天'), (4, '5小时+/天')], default=1)),
                ('why_take_this_course', models.TextField(max_length=1024, verbose_name='报此课程原因')),
                ('why_choose_us', models.TextField(max_length=1024, verbose_name='为何选路飞')),
                ('your_expectation', models.TextField(max_length=1024, verbose_name='你的期待')),
            ],
        ),
        migrations.CreateModel(
            name='EnrolledCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_date', models.DateTimeField(auto_now_add=True, verbose_name='购买课程时间')),
                ('valid_begin_date', models.DateField(verbose_name='有效期开始自')),
                ('valid_end_date', models.DateField(verbose_name='有效期结束至')),
                ('status', models.SmallIntegerField(choices=[(1, '已开通'), (2, '已过期')], default=1)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Account')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Course')),
            ],
        ),
        migrations.CreateModel(
            name='EnrolledDegreeCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_date', models.DateTimeField(auto_now_add=True, verbose_name='购买课程时间')),
                ('valid_begin_date', models.DateField(blank=True, help_text='开通模块时再设置有效期', null=True, verbose_name='有效期开始自')),
                ('valid_end_date', models.DateField(blank=True, null=True, verbose_name='有效期结束至')),
                ('study_status', models.SmallIntegerField(choices=[(1, '在学中'), (2, '休学中'), (3, '已毕业'), (4, '超时结业'), (5, '未开始')], default=5)),
                ('mentor_fee_balance', models.PositiveIntegerField(help_text='这个学员的导师费用，每有惩罚，需在此字段同时扣除', verbose_name='导师费用余额')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Account')),
                ('degree_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.DegreeCourse')),
                ('mentor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='my_students', to='api.Account', verbose_name='导师')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('contact', models.CharField(blank=True, max_length=64, null=True)),
                ('feedback_type', models.SmallIntegerField(choices=[(1, '网站优化建议'), (2, '烂!我想吐槽'), (3, '网站bug反馈')])),
                ('content', models.TextField(max_length=1024)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Homework',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='作业题目')),
                ('order', models.PositiveSmallIntegerField(help_text='同一课程的每个作业之前的order值间隔1-2个数', verbose_name='作业顺序')),
                ('homework_type', models.SmallIntegerField(choices=[(1, '作业'), (2, '模块通关考核')], default=1)),
                ('requirement', models.TextField(max_length=1024, verbose_name='作业需求')),
                ('threshold', models.TextField(max_length=1024, verbose_name='踩分点')),
                ('recommend_period', models.PositiveSmallIntegerField(default=7, help_text='用于计算奖学金', verbose_name='推荐完成周期(天)')),
                ('scholarship_value', models.PositiveSmallIntegerField(verbose_name='为该作业分配的奖学金(贝里)')),
                ('enabled', models.BooleanField(default=True, help_text='本作业如果后期不需要了，不想让学员看到，可以设置为False')),
                ('note', models.TextField(blank=True, null=True, verbose_name='注意事项')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.CourseChapter')),
            ],
        ),
        migrations.CreateModel(
            name='HomeworkRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.SmallIntegerField(blank=True, choices=[(100, 'A+'), (90, 'A'), (85, 'B+'), (80, 'B'), (70, 'B-'), (60, 'C+'), (50, 'C'), (40, 'C-'), (-1, 'D'), (0, 'N/A'), (-100, 'COPY')], null=True, verbose_name='分数')),
                ('mentor_comment', models.TextField(blank=True, null=True, verbose_name='导师批注')),
                ('status', models.SmallIntegerField(choices=[(1, '待批改'), (2, '已通过'), (3, '不合格')], default=1, verbose_name='作业状态')),
                ('submit_num', models.SmallIntegerField(default=0, verbose_name='提交次数')),
                ('correct_date', models.DateTimeField(blank=True, null=True, verbose_name='备注日期')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='作业提交日期')),
                ('check_date', models.DateTimeField(blank=True, null=True, verbose_name='批改日期')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='提交日期')),
                ('reward_status', models.SmallIntegerField(default=1, verbose_name='作业记录奖惩状态')),
                ('homework', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Homework')),
                ('mentor', models.ForeignKey(limit_choices_to={'role': 1}, on_delete=django.db.models.deletion.CASCADE, related_name='my_stu_homework_record', to='api.Account', verbose_name='导师')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.EnrolledDegreeCourse', verbose_name='学生')),
            ],
        ),
        migrations.CreateModel(
            name='Industry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='行业名称')),
            ],
        ),
        migrations.CreateModel(
            name='OftenAskedQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(verbose_name='关联课程或学位课程表中的课程ID')),
                ('question', models.CharField(max_length=255, verbose_name='问题')),
                ('answer', models.TextField(max_length=1024, verbose_name='回答')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='关联课程或学位课程表')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(max_length=128, unique=True, verbose_name='订单唯一标识（自动生成）')),
                ('payment_type', models.SmallIntegerField(choices=[(1, '微信'), (2, '支付宝'), (3, '优惠码'), (4, '贝里')])),
                ('actual_amount', models.FloatField(verbose_name='实付金额')),
                ('payment_number', models.CharField(blank=True, max_length=128, null=True, verbose_name='支付第3方订单号')),
                ('status', models.SmallIntegerField(choices=[(1, '交易成功'), (2, '待支付'), (3, '退费申请中'), (4, '已退费'), (5, '主动取消'), (6, '超时取消')], verbose_name='状态')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='订单生成时间')),
                ('pay_time', models.DateTimeField(blank=True, null=True, verbose_name='付款时间')),
                ('cancel_time', models.DateTimeField(blank=True, null=True, verbose_name='订单取消时间')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Account')),
            ],
        ),
        migrations.CreateModel(
            name='OrderDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(verbose_name='关联课程或学位课程表中的课程ID')),
                ('original_price', models.FloatField(verbose_name='课程原价')),
                ('price', models.FloatField(verbose_name='折后价格')),
                ('valid_period_display', models.CharField(help_text='用于页面上显示', max_length=32, verbose_name='有效期显示')),
                ('valid_period', models.PositiveIntegerField(help_text='用于计算课程有效期', verbose_name='有效期(days)')),
                ('memo', models.CharField(blank=True, max_length=255, null=True, verbose_name='其他说明')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='关联课程或学位课程表')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Order')),
            ],
        ),
        migrations.CreateModel(
            name='PricePolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(verbose_name='关联普通课或者学位课中的课程ID')),
                ('valid_period', models.SmallIntegerField(choices=[(1, '1天'), (3, '3天'), (7, '1周'), (14, '2周'), (30, '1个月'), (60, '2个月'), (90, '3个月'), (180, '6个月'), (210, '12个月'), (540, '18个月'), (720, '24个月')], verbose_name='课程周期')),
                ('price', models.FloatField(verbose_name='价格')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='关联普通课或者学位课表')),
            ],
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='职位名称')),
                ('industry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Industry')),
            ],
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(unique=True, verbose_name='省代码')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='省名称')),
            ],
        ),
        migrations.CreateModel(
            name='QACounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(verbose_name='问题或回答的ID')),
                ('data_type', models.SmallIntegerField(choices=[(1, '点赞'), (2, '踩'), (3, '同问')])),
                ('date', models.DateTimeField(auto_now=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Account')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='问题或回答表')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=128, verbose_name='问题概要')),
                ('question_type', models.SmallIntegerField(choices=[(1, '专题课程问题'), (2, '学位课程问题')], default=1, verbose_name='来源')),
                ('content', models.TextField(max_length=1024, verbose_name='问题内容')),
                ('enquiries_count', models.IntegerField(default=0, verbose_name='同问者计数')),
                ('attachment_path', models.CharField(blank=True, help_text='问题记录的截图等', max_length=128, null=True, verbose_name='附件路径')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('status', models.SmallIntegerField(choices=[(0, '待解答'), (1, '已解答'), (2, '已关闭')], default=0)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Account', verbose_name='提问者')),
                ('course_section', models.ForeignKey(blank=True, help_text='针对整个学位课程的提问不需关联特定课时', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.CourseSection')),
                ('degree_course', models.ForeignKey(blank=True, help_text='若是针对整个学位课程的提问，关联这个', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.DegreeCourse')),
            ],
        ),
        migrations.CreateModel(
            name='Scholarship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_percent', models.PositiveSmallIntegerField(help_text='只填百分值，如80,代表80%', verbose_name='奖励档位(时间百分比)')),
                ('value', models.PositiveIntegerField(verbose_name='奖学金数额')),
                ('degree_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.DegreeCourse')),
            ],
        ),
        migrations.CreateModel(
            name='ScoreRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('score', models.IntegerField(verbose_name='金额(贝里)')),
                ('balance', models.PositiveIntegerField(verbose_name='奖金余额(贝里)')),
                ('maturity_date', models.DateField(help_text='每天凌晨定时任务会跑，所以最迟一天', verbose_name='成熟日期(可提现日期)')),
                ('applied', models.BooleanField(default=False, help_text='奖赏纪录是否已被执行', verbose_name='是否已被执行')),
                ('applied_date', models.DateTimeField(blank=True, null=True, verbose_name='事件生效日期')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='事件触发日期')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Account', verbose_name='被执行人')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('degree_course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.DegreeCourse', verbose_name='关联学位课程')),
            ],
        ),
        migrations.CreateModel(
            name='ScoreRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rule', models.SmallIntegerField(choices=[(1, '未按时交作业'), (2, '未及时批改作业'), (3, '作业成绩'), (4, '未在规定时间内对学员进行跟进'), (5, '未在规定时间内回复学员问题'), (6, '收到学员投诉'), (7, '导师相关'), (8, '学位奖学金')], verbose_name='积分规则')),
                ('score_type', models.SmallIntegerField(choices=[(1, '奖励'), (2, '惩罚'), (3, '初始分配')], verbose_name='奖惩')),
                ('score', models.IntegerField(help_text='扣分数与贝里相等')),
                ('memo', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StudyRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('open_date', models.DateField(blank=True, null=True, verbose_name='开通日期')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='完成日期')),
                ('status', models.SmallIntegerField(choices=[(1, '在学'), (2, '未开通'), (3, '已完成')], default=1, verbose_name='状态')),
                ('course_module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Course', verbose_name='学位模块')),
                ('enrolled_degree_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.EnrolledDegreeCourse')),
            ],
        ),
        migrations.CreateModel(
            name='StuFollowUpRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followup_tool', models.SmallIntegerField(choices=[(1, 'QQ'), (2, '微信'), (3, '电话'), (4, '系统通知')], default=1)),
                ('record', models.TextField(verbose_name='跟进记录')),
                ('attachment_path', models.CharField(blank=True, help_text='跟进记录的截图等', max_length=128, null=True, verbose_name='附件路径')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('enrolled_degree_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.EnrolledDegreeCourse', verbose_name='学生')),
                ('mentor', models.ForeignKey(limit_choices_to={'role': 1}, on_delete=django.db.models.deletion.CASCADE, related_name='mentor', to='api.Account', verbose_name='导师')),
            ],
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_type', models.SmallIntegerField(choices=[(1, '文章标签'), (2, '课程评价标签'), (3, '用户感兴趣技术标签')])),
                ('name', models.CharField(db_index=True, max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='姓名')),
                ('role', models.SmallIntegerField(choices=[(1, '讲师'), (2, '导师')], default=1)),
                ('title', models.CharField(max_length=64, verbose_name='职位、职称')),
                ('signature', models.CharField(blank=True, max_length=255, null=True, verbose_name='导师签名')),
                ('image', models.CharField(max_length=128, verbose_name='头像')),
                ('brief', models.TextField(max_length=1024, verbose_name='简介')),
            ],
        ),
        migrations.CreateModel(
            name='TransactionRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(verbose_name='金额')),
                ('balance', models.IntegerField(verbose_name='账户余额')),
                ('transaction_type', models.SmallIntegerField(choices=[(0, '收入'), (1, '支出'), (2, '退款'), (3, '提现')])),
                ('object_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='关联对象，如：某个订单ID、某项奖惩ID')),
                ('transaction_number', models.CharField(max_length=128, unique=True, verbose_name='流水号（为每一笔生成贝里交易生成唯一标识）')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('memo', models.CharField(blank=True, max_length=128, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Account')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='关联表，如：订单表、奖惩表')),
            ],
        ),
        migrations.CreateModel(
            name='UserAuthToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=40, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.Account')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='scorerule',
            unique_together={('rule', 'score_type')},
        ),
        migrations.AddField(
            model_name='scorerecord',
            name='score_rule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ScoreRule', verbose_name='关联规则'),
        ),
        migrations.AddField(
            model_name='enrolleddegreecourse',
            name='order_detail',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.OrderDetail', verbose_name='关联订单详细'),
        ),
        migrations.AddField(
            model_name='enrolledcourse',
            name='order_detail',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.OrderDetail', verbose_name='关联订单详细'),
        ),
        migrations.AddField(
            model_name='degreeregistrationform',
            name='enrolled_degree',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.EnrolledDegreeCourse'),
        ),
        migrations.AddField(
            model_name='degreecourse',
            name='teachers',
            field=models.ManyToManyField(to='api.Teacher', verbose_name='课程讲师'),
        ),
        migrations.AddField(
            model_name='coursedetail',
            name='teachers',
            field=models.ManyToManyField(to='api.Teacher', verbose_name='课程讲师'),
        ),
        migrations.AddField(
            model_name='course',
            name='degree_course',
            field=models.ForeignKey(blank=True, help_text='若是学位课程的模块，此处关联学位表', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.DegreeCourse'),
        ),
        migrations.AddField(
            model_name='course',
            name='sub_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.CourseSubCategory', verbose_name='课程所属类'),
        ),
        migrations.AddField(
            model_name='couponrecord',
            name='order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Order', verbose_name='关联订单（订单使用优惠券）'),
        ),
        migrations.AddField(
            model_name='city',
            name='province',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Province'),
        ),
        migrations.AddField(
            model_name='article',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ArticleSource', verbose_name='来源'),
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(blank=True, to='api.Tags', verbose_name='标签'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Question', verbose_name='问题'),
        ),
        migrations.AddField(
            model_name='account',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.City', verbose_name='城市'),
        ),
        migrations.AddField(
            model_name='account',
            name='profession',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Profession', verbose_name='职位信息'),
        ),
        migrations.AddField(
            model_name='account',
            name='tags',
            field=models.ManyToManyField(blank=True, to='api.Tags', verbose_name='感兴趣的标签'),
        ),
        migrations.AlterUniqueTogether(
            name='studyrecord',
            unique_together={('enrolled_degree_course', 'course_module')},
        ),
        migrations.AlterUniqueTogether(
            name='qacounter',
            unique_together={('content_type', 'object_id', 'account')},
        ),
        migrations.AlterUniqueTogether(
            name='pricepolicy',
            unique_together={('content_type', 'object_id', 'valid_period')},
        ),
        migrations.AlterUniqueTogether(
            name='orderdetail',
            unique_together={('order', 'content_type', 'object_id')},
        ),
        migrations.AlterUniqueTogether(
            name='oftenaskedquestion',
            unique_together={('content_type', 'object_id', 'question')},
        ),
        migrations.AlterUniqueTogether(
            name='homeworkrecord',
            unique_together={('homework', 'student')},
        ),
        migrations.AlterUniqueTogether(
            name='homework',
            unique_together={('chapter', 'title')},
        ),
        migrations.AlterUniqueTogether(
            name='enrolleddegreecourse',
            unique_together={('account', 'degree_course')},
        ),
        migrations.AlterUniqueTogether(
            name='coursesection',
            unique_together={('chapter', 'section_link')},
        ),
        migrations.AlterUniqueTogether(
            name='courseoutline',
            unique_together={('course_detail', 'title')},
        ),
        migrations.AlterUniqueTogether(
            name='coursechapter',
            unique_together={('course', 'chapter')},
        ),
        migrations.AlterUniqueTogether(
            name='collection',
            unique_together={('content_type', 'object_id', 'account')},
        ),
    ]
